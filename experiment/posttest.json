{
  "version": 2.0,
  "questions": [
    {
      "question": "What does it mean to convert an NFA to a Regular Expression?",
      "answers": {
        "a": "Reducing the number of states in the NFA",
        "b": "Transforming the NFA into an algebraic form that describes its language",
        "c": "Replacing nondeterministic choices with deterministic ones",
        "d": "Optimizing the transitions for faster execution"
      },
      "explanations": {
        "a": "Incorrect. That refers to minimization, not NFA to RE conversion.",
        "b": "Correct! Converting to RE means representing the language of the NFA in a compact algebraic form.",
        "c": "Incorrect. That happens in NFA to DFA conversion, not NFA to RE.",
        "d": "Incorrect. The purpose is not about performance optimization."
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "What is the primary purpose of converting an NFA into a Regular Expression?",
      "answers": {
        "a": "To generate a DFA first",
        "b": "To get a compact and human-readable form of the accepted language",
        "c": "To replace epsilon transitions with normal transitions",
        "d": "To minimize the number of final states"
      },
      "explanations": {
        "a": "Incorrect. DFA creation is separate.",
        "b": "Correct! Regular Expressions concisely describe the same language as the NFA.",
        "c": "Incorrect. This is only a step but not the main purpose.",
        "d": "Incorrect. Minimization is not the goal of conversion."
      },
      "correctAnswer": "b",
      "difficulty": "beginner"
    },
    {
      "question": "Which method is most commonly used in NFA to RE conversion?",
      "answers": {
        "a": "Pumping Lemma",
        "b": "State Elimination Method",
        "c": "Subset Construction",
        "d": "Grammar Derivation"
      },
      "explanations": {
        "a": "Incorrect. Pumping Lemma proves non-regularity, not conversion.",
        "b": "Correct! State Elimination is the standard method to derive a RE from an NFA.",
        "c": "Incorrect. Subset Construction is for NFA to DFA conversion.",
        "d": "Incorrect. Grammar derivation applies to CFGs, not REs."
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    },
    {
      "question": "In the State Elimination method, what is done at each step?",
      "answers": {
        "a": "All intermediate states are removed at once",
        "b": "One intermediate state is removed and its transitions are updated using RE formulas",
        "c": "The start and final states are merged",
        "d": "Transition labels are deleted without replacement"
      },
      "explanations": {
        "a": "Incorrect. States are removed one at a time.",
        "b": "Correct! Each intermediate state is removed, with its paths replaced by equivalent RE-based edges.",
        "c": "Incorrect. Start and final states stay until the end.",
        "d": "Incorrect. Transitions are rewritten with RE, not discarded."
      },
      "correctAnswer": "b",
      "difficulty": "beginner"
    },
    {
      "question": "Which states must always remain until the end of NFA to RE conversion?",
      "answers": {
        "a": "All states with loops",
        "b": "Only the start and final states",
        "c": "States that have epsilon transitions",
        "d": "States with the lowest index"
      },
      "explanations": {
        "a": "Incorrect. Looping states can be eliminated too.",
        "b": "Correct! Only start and final states remain for the final expression.",
        "c": "Incorrect. Epsilon closure is relevant for NFAs, but here we preserve start/final.",
        "d": "Incorrect. Index numbers donâ€™t matter."
      },
      "correctAnswer": "b",
      "difficulty": "beginner"
    },
    {
      "question": "What is the final output after completing all steps of state elimination?",
      "answers": {
        "a": "A minimized DFA",
        "b": "A Regular Expression that represents the same language",
        "c": "A grammar for the same language",
        "d": "A new NFA with fewer states"
      },
      "explanations": {
        "a": "Incorrect. DFA minimization is unrelated here.",
        "b": "Correct! The final result is a Regular Expression equivalent to the given NFA.",
        "c": "Incorrect. Grammars belong to a different representation class.",
        "d": "Incorrect. The goal is not to rebuild another NFA, but to derive a RE."
      },
      "correctAnswer": "b",
      "difficulty": "beginner"
    }
  ]
}